<!DOCTYPE HTML>
<html>
<head>
    <base href="localhost://localhost:8080/">
    <title>聊天室</title>
</head>

<body onload="fillName()">
<br/>
<div id="user_id"></div>
<div id="user_name"></div>
<div id="count_num">当前在线人数: ${count_num}</br></div>
<input id="text" type="text"/>
<button onclick="send()">Send</button>
<button onclick="closeWebSocket()">Close</button>
<div id="message">
</div>
</body>

<script type="text/javascript">
    var websocket = null;
    var user_id = null;
    var user_name = null;
    //判断当前浏览器是否支持WebSocket
    if ('WebSocket' in window) {
        websocket = new WebSocket("ws://localhost:8080/websocket");
    }
    else {
        alert('Not support websocket')
    }

    //连接发生错误的回调方法
    websocket.onerror = function () {
        setMessageInnerHTML("error");
    };

    //连接成功建立的回调方法
    websocket.onopen = function (event) {
        setMessageInnerHTML("系统消息--> 链接服务器成功！");
        var json = {
            'type' : "userName",
            'userName' : user_name
        };
        websocket.send(JSON.stringify(json));
    }

    //接收到消息的回调方法
    websocket.onmessage = function (event) {
        var json = JSON.parse(event.data);
        if(json.type == "onLineCount"){
            countOnlineNumber(json.message);
        }
        if(json.type == "msg"){
            if(json.userName == user_name){
                setMessageInnerHTML("你发送了消息： " + json.message);
            } else {
                setMessageInnerHTML("接收到 "+ json.userName + " 发来的消息： " + json.message);
            }
        }
        if(json.type == "close"){
            countOnlineNumber(json.message);
            setMessageInnerHTML("系统消息--> "+ json.userName + " 悄悄的离开了! ");
        }
        if(json.type == "open"){
            countOnlineNumber(json.message);

        }
        if(json.type == "userId"){
            showId(json.userId);
        }
        if(json.type == "userName"){
            setMessageInnerHTML("系统消息--> "+ json.userName + " 悄悄的来了! ");
            showName(user_name);
        }
    }

    //连接关闭的回调方法
    websocket.onclose = function () {
        setMessageInnerHTML("系统消息--> 断开与服务器的链接！");
    }

    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
    window.onbeforeunload = function () {
        websocket.close();
    }

    //将消息显示在网页上
    function setMessageInnerHTML(innerHTML) {
        document.getElementById('message').innerHTML += innerHTML + '<br/>';
    }

    //显示在线人数
    function countOnlineNumber(innerHTML) {
        document.getElementById('count_num').innerHTML = "当前在线人数:"+innerHTML + '<br/>';
    }

    //显示个人ID
    function showId(innerHTML) {
        document.getElementById('user_id').innerHTML = "你的id：" + innerHTML + '<br/>';
    }

    //显示个人昵称
    function showName(innerHTML) {
        document.getElementById('user_name').innerHTML = "你的昵称：" + innerHTML + '<br/>';
    }

    //关闭连接
    function closeWebSocket() {
        websocket.close();
    }

    //发送消息
    function send() {
        var message = document.getElementById('text').value;
        var json = {
            'type' : "msg",
            'message' : message,
            'userName' : user_name
        };
        websocket.send(JSON.stringify(json));
        //websocket.send(message);
    }

    //录入用户名
    function fillName() {
        var name=prompt("Please enter your name","")
           if (name!=null && name!="")
           {
              user_name = name;
           }
    }
</script>
</html>